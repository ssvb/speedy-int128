// Automatically generated by the 'gen_int128_ldc.rb' script!

module speedy.int128_ldc;

version (LDC) {
import ldc.llvmasm;

nothrow:
@safe:
@nogc:

// Things from core.int128

alias I = long;
alias U = ulong;
enum Ubits = uint(U.sizeof * 8);

version (X86_64) private enum Cent_alignment = 16;
else             private enum Cent_alignment = (size_t.sizeof * 2);

align(Cent_alignment) struct Cent
{
    version (LittleEndian)
    {
        U lo;  // low 64 bits
        U hi;  // high 64 bits
    }
    else
    {
        U hi;  // high 64 bits
        U lo;  // low 64 bits
    }
}

pragma(inline, true) pure
Cent divmod()(Cent c1, Cent c2, out Cent modulus)
{
    modulus = mod(c1, c2);
    return div(c1, c2);
}

pragma(inline, true) pure
Cent shl()(Cent a, uint b)
{
    return cast(Cent)__ir_pure!(`
        %4 = zext i64 %1 to i128
        %5 = shl nuw i128 %4, 64
        %6 = zext i64 %0 to i128
        %7 = or i128 %5, %6
        %8 = zext i32 %2 to i128
        %9 = shl i128 %7, %8
        %10 = trunc i128 %9 to i64
        %11 = lshr i128 %9, 64
        %12 = trunc i128 %11 to i64
        %13 = insertvalue [ 2 x i64 ] undef, i64 %10, 0
        %14 = insertvalue [ 2 x i64 ] %13, i64 %12, 1
        ret [ 2 x i64 ] %14`, long[2])(a.lo, a.hi, b);
}

pragma(inline, true) pure
Cent shr()(Cent a, uint b)
{
    return cast(Cent)__ir_pure!(`
        %4 = zext i64 %1 to i128
        %5 = shl nuw i128 %4, 64
        %6 = zext i64 %0 to i128
        %7 = or i128 %5, %6
        %8 = zext i32 %2 to i128
        %9 = lshr i128 %7, %8
        %10 = trunc i128 %9 to i64
        %11 = lshr i128 %9, 64
        %12 = trunc i128 %11 to i64
        %13 = insertvalue [ 2 x i64 ] undef, i64 %10, 0
        %14 = insertvalue [ 2 x i64 ] %13, i64 %12, 1
        ret [ 2 x i64 ] %14`, long[2])(a.lo, a.hi, b);
}

pragma(inline, true) pure
Cent sar()(Cent a, uint b)
{
    return cast(Cent)__ir_pure!(`
        %4 = zext i64 %1 to i128
        %5 = shl nuw i128 %4, 64
        %6 = zext i64 %0 to i128
        %7 = or i128 %5, %6
        %8 = zext i32 %2 to i128
        %9 = ashr i128 %7, %8
        %10 = trunc i128 %9 to i64
        %11 = lshr i128 %9, 64
        %12 = trunc i128 %11 to i64
        %13 = insertvalue [ 2 x i64 ] undef, i64 %10, 0
        %14 = insertvalue [ 2 x i64 ] %13, i64 %12, 1
        ret [ 2 x i64 ] %14`, long[2])(a.lo, a.hi, b);
}

pragma(inline, true) pure
Cent mul()(Cent a, Cent b)
{
    return cast(Cent)__ir_pure!(`
        %5 = zext i64 %1 to i128
        %6 = shl nuw i128 %5, 64
        %7 = zext i64 %0 to i128
        %8 = or i128 %6, %7
        %9 = zext i64 %3 to i128
        %10 = shl nuw i128 %9, 64
        %11 = zext i64 %2 to i128
        %12 = or i128 %10, %11
        %13 = mul nsw i128 %12, %8
        %14 = trunc i128 %13 to i64
        %15 = lshr i128 %13, 64
        %16 = trunc i128 %15 to i64
        %17 = insertvalue [ 2 x i64 ] undef, i64 %14, 0
        %18 = insertvalue [ 2 x i64 ] %17, i64 %16, 1
        ret [ 2 x i64 ] %18`, long[2])(a.lo, a.hi, b.lo, b.hi);
}

pragma(inline, true) pure
Cent div()(Cent a, Cent b)
{
    return cast(Cent)__ir_pure!(`
        %5 = zext i64 %1 to i128
        %6 = shl nuw i128 %5, 64
        %7 = zext i64 %0 to i128
        %8 = or i128 %6, %7
        %9 = zext i64 %3 to i128
        %10 = shl nuw i128 %9, 64
        %11 = zext i64 %2 to i128
        %12 = or i128 %10, %11
        %13 = sdiv i128 %8, %12
        %14 = trunc i128 %13 to i64
        %15 = lshr i128 %13, 64
        %16 = trunc i128 %15 to i64
        %17 = insertvalue [ 2 x i64 ] undef, i64 %14, 0
        %18 = insertvalue [ 2 x i64 ] %17, i64 %16, 1
        ret [ 2 x i64 ] %18`, long[2])(a.lo, a.hi, b.lo, b.hi);
}

pragma(inline, true) pure
Cent mod()(Cent a, Cent b)
{
    return cast(Cent)__ir_pure!(`
        %5 = zext i64 %1 to i128
        %6 = shl nuw i128 %5, 64
        %7 = zext i64 %0 to i128
        %8 = or i128 %6, %7
        %9 = zext i64 %3 to i128
        %10 = shl nuw i128 %9, 64
        %11 = zext i64 %2 to i128
        %12 = or i128 %10, %11
        %13 = srem i128 %8, %12
        %14 = trunc i128 %13 to i64
        %15 = lshr i128 %13, 64
        %16 = trunc i128 %15 to i64
        %17 = insertvalue [ 2 x i64 ] undef, i64 %14, 0
        %18 = insertvalue [ 2 x i64 ] %17, i64 %16, 1
        ret [ 2 x i64 ] %18`, long[2])(a.lo, a.hi, b.lo, b.hi);
}

pragma(inline, true) pure
Cent xor()(Cent a, Cent b)
{
    return cast(Cent)__ir_pure!(`
        %5 = zext i64 %1 to i128
        %6 = shl nuw i128 %5, 64
        %7 = zext i64 %0 to i128
        %8 = or i128 %6, %7
        %9 = zext i64 %3 to i128
        %10 = shl nuw i128 %9, 64
        %11 = zext i64 %2 to i128
        %12 = or i128 %10, %11
        %13 = xor i128 %12, %8
        %14 = trunc i128 %13 to i64
        %15 = lshr i128 %13, 64
        %16 = trunc i128 %15 to i64
        %17 = insertvalue [ 2 x i64 ] undef, i64 %14, 0
        %18 = insertvalue [ 2 x i64 ] %17, i64 %16, 1
        ret [ 2 x i64 ] %18`, long[2])(a.lo, a.hi, b.lo, b.hi);
}

pragma(inline, true) pure
Cent and()(Cent a, Cent b)
{
    return cast(Cent)__ir_pure!(`
        %5 = zext i64 %1 to i128
        %6 = shl nuw i128 %5, 64
        %7 = zext i64 %0 to i128
        %8 = or i128 %6, %7
        %9 = zext i64 %3 to i128
        %10 = shl nuw i128 %9, 64
        %11 = zext i64 %2 to i128
        %12 = or i128 %10, %11
        %13 = and i128 %12, %8
        %14 = trunc i128 %13 to i64
        %15 = lshr i128 %13, 64
        %16 = trunc i128 %15 to i64
        %17 = insertvalue [ 2 x i64 ] undef, i64 %14, 0
        %18 = insertvalue [ 2 x i64 ] %17, i64 %16, 1
        ret [ 2 x i64 ] %18`, long[2])(a.lo, a.hi, b.lo, b.hi);
}

pragma(inline, true) pure
Cent or()(Cent a, Cent b)
{
    return cast(Cent)__ir_pure!(`
        %5 = zext i64 %1 to i128
        %6 = shl nuw i128 %5, 64
        %7 = zext i64 %0 to i128
        %8 = or i128 %6, %7
        %9 = zext i64 %3 to i128
        %10 = shl nuw i128 %9, 64
        %11 = zext i64 %2 to i128
        %12 = or i128 %10, %11
        %13 = or i128 %12, %8
        %14 = trunc i128 %13 to i64
        %15 = lshr i128 %13, 64
        %16 = trunc i128 %15 to i64
        %17 = insertvalue [ 2 x i64 ] undef, i64 %14, 0
        %18 = insertvalue [ 2 x i64 ] %17, i64 %16, 1
        ret [ 2 x i64 ] %18`, long[2])(a.lo, a.hi, b.lo, b.hi);
}

pragma(inline, true) pure
Cent add()(Cent a, Cent b)
{
    return cast(Cent)__ir_pure!(`
        %5 = zext i64 %1 to i128
        %6 = shl nuw i128 %5, 64
        %7 = zext i64 %0 to i128
        %8 = zext i64 %3 to i128
        %9 = shl nuw i128 %8, 64
        %10 = zext i64 %2 to i128
        %11 = or i128 %6, %7
        %12 = add i128 %11, %10
        %13 = add i128 %12, %9
        %14 = trunc i128 %13 to i64
        %15 = lshr i128 %13, 64
        %16 = trunc i128 %15 to i64
        %17 = insertvalue [ 2 x i64 ] undef, i64 %14, 0
        %18 = insertvalue [ 2 x i64 ] %17, i64 %16, 1
        ret [ 2 x i64 ] %18`, long[2])(a.lo, a.hi, b.lo, b.hi);
}

pragma(inline, true) pure
Cent sub()(Cent a, Cent b)
{
    return cast(Cent)__ir_pure!(`
        %5 = zext i64 %1 to i128
        %6 = shl nuw i128 %5, 64
        %7 = zext i64 %0 to i128
        %8 = zext i64 %3 to i128
        %9 = mul i128 %8, -18446744073709551616
        %10 = zext i64 %2 to i128
        %11 = or i128 %6, %7
        %12 = sub i128 %11, %10
        %13 = add i128 %12, %9
        %14 = trunc i128 %13 to i64
        %15 = lshr i128 %13, 64
        %16 = trunc i128 %15 to i64
        %17 = insertvalue [ 2 x i64 ] undef, i64 %14, 0
        %18 = insertvalue [ 2 x i64 ] %17, i64 %16, 1
        ret [ 2 x i64 ] %18`, long[2])(a.lo, a.hi, b.lo, b.hi);
}

pragma(inline, true) pure
Cent inc()(Cent a)
{
    return cast(Cent)__ir_pure!(`
        %3 = zext i64 %1 to i128
        %4 = shl nuw i128 %3, 64
        %5 = zext i64 %0 to i128
        %6 = add nuw nsw i128 %5, 1
        %7 = add i128 %6, %4
        %8 = trunc i128 %7 to i64
        %9 = lshr i128 %7, 64
        %10 = trunc i128 %9 to i64
        %11 = insertvalue [ 2 x i64 ] undef, i64 %8, 0
        %12 = insertvalue [ 2 x i64 ] %11, i64 %10, 1
        ret [ 2 x i64 ] %12`, long[2])(a.lo, a.hi);
}

pragma(inline, true) pure
Cent dec()(Cent a)
{
    return cast(Cent)__ir_pure!(`
        %3 = zext i64 %1 to i128
        %4 = shl nuw i128 %3, 64
        %5 = zext i64 %0 to i128
        %6 = add nsw i128 %5, -1
        %7 = add i128 %6, %4
        %8 = trunc i128 %7 to i64
        %9 = lshr i128 %7, 64
        %10 = trunc i128 %9 to i64
        %11 = insertvalue [ 2 x i64 ] undef, i64 %8, 0
        %12 = insertvalue [ 2 x i64 ] %11, i64 %10, 1
        ret [ 2 x i64 ] %12`, long[2])(a.lo, a.hi);
}

pragma(inline, true) pure
Cent neg()(Cent a)
{
    return cast(Cent)__ir_pure!(`
        %3 = zext i64 %1 to i128
        %4 = mul i128 %3, -18446744073709551616
        %5 = zext i64 %0 to i128
        %6 = sub i128 %4, %5
        %7 = trunc i128 %6 to i64
        %8 = lshr i128 %6, 64
        %9 = trunc i128 %8 to i64
        %10 = insertvalue [ 2 x i64 ] undef, i64 %7, 0
        %11 = insertvalue [ 2 x i64 ] %10, i64 %9, 1
        ret [ 2 x i64 ] %11`, long[2])(a.lo, a.hi);
}

pragma(inline, true) pure
Cent com()(Cent a)
{
    return cast(Cent)__ir_pure!(`
        %3 = zext i64 %1 to i128
        %4 = shl nuw i128 %3, 64
        %5 = zext i64 %0 to i128
        %6 = or i128 %4, %5
        %7 = xor i128 %6, -1
        %8 = trunc i128 %7 to i64
        %9 = lshr i128 %7, 64
        %10 = trunc i128 %9 to i64
        %11 = insertvalue [ 2 x i64 ] undef, i64 %8, 0
        %12 = insertvalue [ 2 x i64 ] %11, i64 %10, 1
        ret [ 2 x i64 ] %12`, long[2])(a.lo, a.hi);
}

pragma(inline, true) pure
bool gt()(Cent a, Cent b)
{
    return cast(bool)__ir_pure!(`
        %5 = zext i64 %1 to i128
        %6 = shl nuw i128 %5, 64
        %7 = zext i64 %0 to i128
        %8 = or i128 %6, %7
        %9 = zext i64 %3 to i128
        %10 = shl nuw i128 %9, 64
        %11 = zext i64 %2 to i128
        %12 = or i128 %10, %11
        %13 = icmp sgt i128 %8, %12
        %14 = zext i1 %13 to i32
        ret i32 %14`, int)(a.lo, a.hi, b.lo, b.hi);
}

pragma(inline, true) pure
bool tst()(Cent a)
{
    return cast(bool)__ir_pure!(`
        %3 = zext i64 %1 to i128
        %4 = shl nuw i128 %3, 64
        %5 = zext i64 %0 to i128
        %6 = or i128 %4, %5
        %7 = icmp ne i128 %6, 0
        %8 = zext i1 %7 to i32
        ret i32 %8`, int)(a.lo, a.hi);
}

pragma(inline, true) pure
bool uge()(Cent a, Cent b)
{
    return cast(bool)__ir_pure!(`
        %5 = zext i64 %1 to i128
        %6 = shl nuw i128 %5, 64
        %7 = zext i64 %0 to i128
        %8 = or i128 %6, %7
        %9 = zext i64 %3 to i128
        %10 = shl nuw i128 %9, 64
        %11 = zext i64 %2 to i128
        %12 = or i128 %10, %11
        %13 = icmp uge i128 %8, %12
        %14 = zext i1 %13 to i32
        ret i32 %14`, int)(a.lo, a.hi, b.lo, b.hi);
}

pragma(inline, true) pure
Cent shr1()(Cent a)
{
    return cast(Cent)__ir_pure!(`
        %3 = zext i64 %1 to i128
        %4 = shl nuw i128 %3, 64
        %5 = zext i64 %0 to i128
        %6 = or i128 %4, %5
        %7 = lshr i128 %6, 1
        %8 = trunc i128 %7 to i64
        %9 = lshr i64 %1, 1
        %10 = insertvalue [ 2 x i64 ] undef, i64 %8, 0
        %11 = insertvalue [ 2 x i64 ] %10, i64 %9, 1
        ret [ 2 x i64 ] %11`, long[2])(a.lo, a.hi);
}

} // version (LDC)
